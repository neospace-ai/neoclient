from pydantic import BaseModel
from typing_extensions import Literal

from neoclient.types import ChatMessage

class ChatCompletionChoice(BaseModel):
    """
    Represents a single choice generated by the model during a chat completion request.

    Attributes:
        finish_reason (Literal["stop", "length", "content_filter"]): The reason the model stopped 
            generating tokens for this choice. Possible values:
            - "stop": The model reached a natural stopping point or a specified stop sequence.
            - "length": The maximum number of tokens specified in the request was reached.
            - "content_filter": Content was omitted due to a flag from the content filters.

        index (int): The index of this choice in the list of generated choices.

        message (ChatMessage): The message generated by the model for this choice, including the 
            role and content.
    """
    finish_reason: Literal["stop", "length", "content_filter"]
    """The reason the model stopped generating tokens for this choice."""

    index: int
    """The index of this choice in the list of generated choices."""

    message: ChatMessage
    """The message generated by the model for this choice, including the role and content."""
