from pydantic import BaseModel
from typing import List
from typing_extensions import Literal

from neoclient.types import CompletionChoice, Usage

class Completion(BaseModel):
    """
    Represents the response from a model after processing a completion request.

    Attributes:
        id (str): A unique identifier for the completion.

        choices (List[CompletionChoice]): A list of completion choices generated by the model 
            for the input prompt. Each choice includes the generated text, its index, and the 
            reason the model stopped.

        created (int): The Unix timestamp (in seconds) of when the completion was created.

        model (str): The identifier of the model used to generate the completion.

        object (Literal["text_completion"]): The type of object, which is always "text_completion".

        usage (Usage): Usage statistics for the completion request, such as the number of tokens
            processed or generated.
    """
    id: str
    """A unique identifier for the completion."""

    choices: List[CompletionChoice]
    """The list of completion choices the model generated for the input prompt."""

    created: int
    """The Unix timestamp (in seconds) of when the completion was created."""

    model: str
    """The identifier of the model used for completion."""

    object: Literal["text_completion"]
    """The type of object, which is always "text_completion"."""

    usage: Usage
    """Usage statistics for the completion request, such as token usage."""
